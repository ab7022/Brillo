// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int               @id @default(autoincrement())
  name               String
  email              String            @unique
  password           String?
  profile_url        String?
  username           String?           @unique
  premium_user       Boolean           @default(false)
  validity           DateTime?
  admin              Boolean           @default(false)
  createdAt          DateTime          @default(now())
  provider           String
  visitor            Int               @default(0)
  isdetailsubmitted  Boolean           @default(false)
  project            Project[]
  skill              Skill[]
  education          Education[]
  experience         Experience[]
  socialProfiles     SocialProfiles[]
  basicInfo          BasicInfo[]
  messages           Messages[]
  support            Support[]
  achievement        Achievement[]
  userTemplates      UserTemplate[]
  subscriptionPlan   SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id])
  subscriptionPlanId Int?

  @@index([email], name: "email_idx")
  @@index([username], name: "username_idx")
}

model Support {
  id           Int    @id @default(autoincrement())
  name         String
  email        String
  message      String
  fetchedemail String
  User         User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int?
}

model UserTemplate {
  id         Int     @id @default(autoincrement())
  userId     Int
  templateId Int
  status     Boolean @default(false)
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, templateId])
}

model Messages {
  id      Int    @id @default(autoincrement())
  name    String
  message String
  email   String
  User    User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int?
}

model SubscriptionPlan {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  validity    Int
  createdAt   DateTime @default(now())
  User        User[]
}

model SocialProfiles {
  id       Int    @id @default(autoincrement())
  linkedin String
  github   String
  twitter  String
  email    String
  phone    String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int    @unique
}

model Education {
  id         Int    @id @default(autoincrement())
  degree     String
  college    String
  duration   String
  percentage String
  location   String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model Experience {
  id           Int    @id @default(autoincrement())
  company_name String
  designation  String
  duration     String
  location     String
  description1 String
  description2 String
  description3 String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model Skill {
  id                             Int    @id @default(autoincrement())
  language_soft_skills           String
  programming_technical_skills   String
  software_proficiency           String
  interests_others_skills        String
  business_administrative_skills String
  user                           User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                         Int    @unique
}

model Project {
  id           Int    @id @default(autoincrement())
  title        String
  techstack    String
  description  String
  deployed_url String
  github_url   String
  image        String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
}

model BasicInfo {
  id          Int    @id @default(autoincrement())
  first_name  String
  profile     String
  last_name   String
  designation String
  intro       String
  shortintro  String @default("")
  city        String
  country     String
  resume      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int    @unique
}

model Achievement {
  id           Int    @id @default(autoincrement())
  achievement1 String
  achievement2 String
  achievement3 String
  achievement4 String
  achievement5 String
  achievement6 String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int    @unique
}
